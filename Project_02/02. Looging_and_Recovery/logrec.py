#!/usr/bin/env python3#   Assignment : CPSC-551 Project_02#   Authors    : Rahul Chauhan        (rahulchauhan@csu.fullerton.edu)#                Harshit Singh Rathod (rathod10892@csu.fullerton.edu)#   Program    : assistant to recovery.py to log and recoverimport yamlimport argparseimport proxyimport json# Create's yaml file if the file does not existsdef get_file(user):    filename = user + ".yaml"    try:        with open(filename, 'r') as stream:            print(filename)    except IOError:        with open(filename, 'w') as stream:            print(filename)        return filename# Main method to handle logging and recoverydef create_att(tsname, tsevent, tsvalue):    yamnam = get_file(tsname)    ######################################    parser = argparse.ArgumentParser()    parser.add_argument('-c', '--config', metavar='file', type=str, default = yamnam)    args = parser.parse_args()    with open(args.config, 'r') as stream:            restart_chk = yaml.safe_load(stream)# if the event is start then check if it is a restart and recover the tuple, else log the name of tuplespace     if tsevent == "start":        if restart_chk == None:            yamvalue = {'name': f'{tsname}', 'uri': f'{tsvalue}', 'filters': []}            with open(args.config, 'w') as stream:                yaml.safe_dump(yamvalue,stream)        else:                                                 # it is restart hence recover            adapter_uri = restart_chk['adapter']['uri']                      ts = proxy.TupleSpaceAdapter(adapter_uri)            print(f'Connected to tuplespace {tsname} on {adapter_uri}')            yamlrecord = restart_chk['filters']            for i in range(0,len(yamlrecord)):                wt_tuple = yamlrecord[i][1]                js_tuple = json.loads(wt_tuple)                if yamlrecord[i][0] == "write":                    ts._out(js_tuple)                if yamlrecord[i][0] == "take":                    ts._in(js_tuple)# if the event is adapter the log the address and port in the file such that it can be fetched while recovery    if tsevent == "adapter":        yamvalue = {'adapter': {'uri': tsvalue}}        with open(args.config, 'a') as stream:            yaml.safe_dump(yamvalue,stream)# if the event is write/take then log it in the file    if (tsevent == "write" or tsevent == "take"):        yamvalue = [f'{tsevent}', f'{tsvalue}']        with open(args.config, 'r') as stream:            fil_upd = yaml.safe_load(stream)            fil_upd['filters'].extend([yamvalue])        with open(args.config, 'w') as stream:            yaml.safe_dump(fil_upd,stream)